{
  "_args": [
    [
      "tar-pack@3.4.0",
      "/Users/eshanker/Code/fsevents"
    ]
  ],
  "_from": "tar-pack@3.4.0",
  "_id": "tar-pack@3.4.0",
  "_inBundle": false,
  "_integrity": "sha1-I74tf2cagzk3bL2wuP4/3r8xeYQ=",
  "_location": "/fsevents/tar-pack",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "tar-pack@3.4.0",
    "name": "tar-pack",
    "escapedName": "tar-pack",
    "rawSpec": "3.4.0",
    "saveSpec": null,
    "fetchSpec": "3.4.0"
  },
  "_requiredBy": [
    "/fsevents/node-pre-gyp"
  ],
  "_resolved": "https://registry.npmjs.org/tar-pack/-/tar-pack-3.4.0.tgz",
  "_shrinkwrap": null,
  "_spec": "3.4.0",
  "_where": "/Users/eshanker/Code/fsevents",
  "bugs": {
    "url": "https://github.com/ForbesLindesay/tar-pack/issues"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "fstream": "^1.0.10",
    "fstream-ignore": "^1.0.5",
    "once": "^1.3.3",
    "readable-stream": "^2.1.4",
    "rimraf": "^2.5.1",
    "tar": "^2.2.1",
    "uid-number": "^0.0.6"
  },
  "description": "Package and un-package modules of some sort (in tar/gz bundles).",
  "devDependencies": {
    "mkdirp": "*",
    "mocha": "*",
    "rfile": "*"
  },
  "homepage": "https://github.com/ForbesLindesay/tar-pack#readme",
  "license": "BSD-2-Clause",
  "name": "tar-pack",
  "optionalDependencies": {},
  "readme": "# Tar Pack\n\nPackage and un-package modules of some sort (in tar/gz bundles).  This is mostly useful for package managers.  Note that it doesn't check for or touch `package.json` so it can be used even if that's not the way you store your package info.\n\n[![Build Status](https://img.shields.io/travis/ForbesLindesay/tar-pack/master.svg)](https://travis-ci.org/ForbesLindesay/tar-pack)\n[![Dependency Status](https://img.shields.io/david/ForbesLindesay/tar-pack.svg)](https://david-dm.org/ForbesLindesay/tar-pack)\n[![NPM version](https://img.shields.io/npm/v/tar-pack.svg)](https://www.npmjs.com/package/tar-pack)\n\n## Installation\n\n    $ npm install tar-pack\n\n## API\n\n### pack(folder|packer, [options])\n\nPack the folder at `folder` into a gzipped tarball and return the tgz as a stream.  Files ignored by `.gitignore` will not be in the package.\n\nYou can optionally pass a `fstream.DirReader` directly, instead of folder.  For example, to create an npm package, do:\n\n```js\npack(require(\"fstream-npm\")(folder), [options])\n```\n\nOptions:\n\n - `noProprietary` (defaults to `false`) Set this to `true` to prevent any proprietary attributes being added to the tarball.  These attributes are allowed by the spec, but may trip up some poorly written tarball parsers.\n - `fromBase` (defaults to `false`) Set this to `true` to make sure your tarballs root is the directory you pass in.\n - `ignoreFiles` (defaults to `['.gitignore']`) These files can specify files to be excluded from the package using the syntax of `.gitignore`.  This option is ignored if you parse a `fstream.DirReader` instead of a string for folder.\n - `filter` (defaults to `entry => true`) A function that takes an entry and returns `true` if it should be included in the package and `false` if it should not.  Entryies are of the form `{path, basename, dirname, type}` where (type is \"Directory\" or \"File\").  This function is ignored if you parse a `fstream.DirReader` instead of a string for folder.\n\nExample:\n\n```js\nvar write = require('fs').createWriteStream\nvar pack = require('tar-pack').pack\npack(process.cwd())\n  .pipe(write(__dirname + '/package.tar.gz'))\n  .on('error', function (err) {\n    console.error(err.stack)\n  })\n  .on('close', function () {\n    console.log('done')\n  })\n```\n\n### unpack(folder, [options,] cb)\n\nReturn a stream that unpacks a tarball into a folder at `folder`.  N.B. the output folder will be removed first if it already exists.\n\nThe callback is called with an optional error and, as its second argument, a string which is one of:\n\n - `'directory'`, indicating that the extracted package was a directory (either `.tar.gz` or `.tar`)\n - `'file'`, incating that the extracted package was just a single file (extracted to `defaultName`, see options)\n\nBasic Options:\n\n - `defaultName` (defaults to `index.js`) If the package is a single file, rather than a tarball, it will be \"extracted\" to this file name, set to `false` to disable.\n\nAdvanced Options (you probably don't need any of these):\n\n - `gid` - (defaults to `null`) the `gid` to use when writing files\n - `uid` - (defaults to `null`) the `uid` to use when writing files\n - `dmode` - (defaults to `0777`) The mode to use when creating directories\n - `fmode` - (defaults to `0666`) The mode to use when creating files\n - `unsafe` - (defaults to `false`) (on non win32 OSes it overrides `gid` and `uid` with the current processes IDs)\n - `strip` - (defaults to `1`) Number of path segments to strip from the root when extracting\n - `keepFiles` - (defaults to `false`) Set this to `true` to prevent target directory to be removed. Extracted files overwrite existing files.\n\nExample:\n\n```js\nvar read = require('fs').createReadStream\nvar unpack = require('tar-pack').unpack\nread(process.cwd() + '/package.tar.gz')\n  .pipe(unpack(__dirname + '/package/', function (err) {\n    if (err) console.error(err.stack)\n    else console.log('done')\n  }))\n```\n\n## License\n\n  BSD\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ForbesLindesay/tar-pack.git"
  },
  "scripts": {
    "test": "mocha -R list"
  },
  "version": "3.4.0"
}
